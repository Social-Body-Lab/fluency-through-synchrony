#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
This experiment was created using  3 Experiment Builder (v3.1.5),
    on July 24, 2019, at 17:58
If you publish work using this script please cite the PsychoPy publications:
    Peirce, JW (2007) PsychoPy - Psychophysics software in Python.
        Journal of Neuroscience Methods, 162(1-2), 8-13.
    Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy.
        Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008
        
Modifications to the template generated by the Builder were done by Joshua Bamford.
This experiment involves the presentation of videos which exist outside the routines
generated by the builder, concurrently with routines of a visual search task.

This version does not include audio recording, and has three video conditions.

31/1/2020 Added eye tracking 

18/2/2020 Final edits 

25/2/2020 Edits after pilot

    line 1009 (and also later)
    moved timer reset, and adjusted text_9 timing.
    Results in more consistent start time for the letters.
    
    lines 840, 1435, 1936
    changed 'begin' routine to include staggered text, conditional on blockCount.
    
01/09/2020 Edits in Perth
    
    added options to switch eyetracking off
    tried to make video loading more efficient
    
 


"""

from __future__ import absolute_import, division
from psychopy import locale_setup, sound, gui, visual, core, data, event, logging, clock
from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED, STOPPED, FINISHED, PRESSED, RELEASED, FOREVER)
import numpy as np  # whole numpy lib is available, prepend 'np.'
from numpy import (sin, cos, tan, log, log10, pi, average,
                   sqrt, std, deg2rad, rad2deg, linspace, asarray)
from numpy.random import random, randint, normal, shuffle
import os  # handy system and path functions
import sys  # to get file system encoding

from psychopy.hardware import keyboard

# Set eye-track mode
trackEyes = 0 # set to 0 to not track, required if eye-tracker not connected. Set to 1 to track.

# Ensure that relative paths start from the same directory as this script
_thisDir = os.path.dirname(os.path.abspath(__file__))          
os.chdir(_thisDir)

# Store info about the experiment session
psychopyVersion = '3.1.5'
expName = 'study2A'  # updated
expInfo = {'participant': '', 'session': '001'}
dlg = gui.DlgFromDict(dictionary=expInfo, sortKeys=False, title=expName)
if dlg.OK == False:
    core.quit()  # user pressed cancel
expInfo['date'] = data.getDateStr()  # add a simple timestamp
expInfo['expName'] = expName
expInfo['psychopyVersion'] = psychopyVersion

# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc
filename = _thisDir + os.sep + u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])

# An ExperimentHandler isn't essential but helps with data saving
thisExp = data.ExperimentHandler(name=expName, version='',
    extraInfo=expInfo, runtimeInfo=None,
    originPath='C:\\Users\\bamfo\\OneDrive\\Documents\\DPhil\\Study 2\\Study2-video-search\\Study2.py', # set to local path
    savePickle=True, saveWideText=True,
    dataFileName=filename)
# save a log file for detail verbose info
logFile = logging.LogFile(filename+'.log', level=logging.EXP)
logging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file

endExpNow = False  # flag for 'escape' or other condition => quit the exp

# Setup the Window
win = visual.Window(
    size=[1536, 864], fullscr=True, screen=0, 
    winType='pyglet', allowGUI=False, allowStencil=False,
    monitor='testMonitor', color=[0,0,0], colorSpace='rgb',
    blendMode='avg', useFBO=True, 
    units='height')

# Enable eye-tracking
if trackEyes == 1:
    import zmq
    import msgpack as serializer
    from time import time

    # setup zmq context and remote helper
    ctx = zmq.Context()
    pupil_remote = zmq.Socket(ctx, zmq.REQ)
    pupil_remote.connect("tcp://localhost:50020")
    
    pupil_remote.send_string("PUB_PORT")
    pub_port = pupil_remote.recv_string()
    pub_socket = zmq.Socket(ctx, zmq.PUB)
    pub_socket.connect("tcp://localhost:{}".format(pub_port))
    
    # set time for pupil core
    time_fn = time # could replace with psychopy.core.getTime(applyZero=True)
    pupil_remote.send_string("T {}".format(time_fn()))
    print(pupil_remote.recv_string())
    
    def notify(notification):
        """Sends ''notification'' to Pupil Remote"""
        topic = "notify."+notification["subject"]
        payload = serializer.dumps(notification, use_bin_type=True)
        pupil_remote.send_string(topic, flags=zmq.SNDMORE)
        pupil_remote.send(payload)
        return pupil_remote.recv_string()
    
    def send_trigger(trigger):
        payload = serializer.dumps(trigger, use_bin_type=True)
        pub_socket.send_string(trigger["topic"], flags=zmq.SNDMORE)
        pub_socket.send(payload)
    
    #start annotations plugin
    notify({"subject": "start_plugin", "name": "Annotation_Capture", "args": {}})
    
    def new_trigger(label, duration):
        return {
            "topic": "annotation",
            "label": label,
            "timestamp": time_fn(),
            "duration": duration,
            }

# store frame rate of monitor if we can measure it
expInfo['frameRate'] = win.getActualFrameRate()
if expInfo['frameRate'] != None:
    frameDur = 1.0 / round(expInfo['frameRate'])
else:
    frameDur = 1.0 / 60.0  # could not measure, so guess

# create a default keyboard (e.g. to check for escape)
defaultKeyboard = keyboard.Keyboard()

# Initialize components for Routine "welcome"
welcomeClock = core.Clock()
text = visual.TextStim(win=win, name='text',
    text='Welcome to this study.\nPlease read the following instructions carefully.\nPress any key to continue.',
    font='Arial',
    pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);

# Initialize components for Routine "instr1"
instr1Clock = core.Clock()
text_5 = visual.TextStim(win=win, name='text_5',
    text='In this study, you will see a video of two hands tapping on a desk.\n\nWith your left hand, tap along with the hand on the left.\n\nThe tempo may change sometimes, but try your best to stay in time with the hand on the left.',
    font='Arial',
    pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);

# Initialize components for Routine "instr2"
instr2Clock = core.Clock()
text_7 = visual.TextStim(win=win, name='text_7',
    text="While tapping along to the video with your left hand, you will be also be shown some letters on the screen.\nAmongst the other letters, there will be either an 'N' or an 'M'.\n\nIf you see an 'N', press the 'N' key.\nIf you see an 'M', press the 'M' key.\nYou should respond with your right hand.\n\nThere is no time limit, but try to answer as quickly as possible.",
    font='Arial',
    pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);

# Initialize components for Routine "instr3"
instr3Clock = core.Clock()
text_6 = visual.TextStim(win=win, name='text_6',
    text="You will be given six sessions, with a break in between each of them.\nBefore starting, you'll get three practice sessions.\n\nRemember:\nTap along to the video on the left of the screen, using your left hand.\nRespond using the 'N' or 'M' key with your right hand.",
    font='Arial',
    pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);

# Initialize components for Routine "begin_prac"
begin_pracClock = core.Clock()
text_10 = visual.TextStim(win=win, name='text_10',
    text="That is the end of the practice trials. \n\nPlease take the time now to ask the experimenter if you have any questions.\nWhen you are ready, we will continue to the real sessions.\n\nPress 'space' to continue.",
    font='Arial',
    pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);

# Initialize components for Routine "trial"
trialClock = core.Clock()
stimulus_1 = visual.TextStim(win=win, name='stimulus_1',
    text='default text',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-1.0);
stimulus_2 = visual.TextStim(win=win, name='stimulus_2',
    text='O',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-2.0);
stimulus_3 = visual.TextStim(win=win, name='stimulus_3',
    text='X',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-3.0);
stimulus_4 = visual.TextStim(win=win, name='stimulus_4',
    text='E',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-4.0);
stimulus_5 = visual.TextStim(win=win, name='stimulus_5',
    text='H',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-5.0);
stimulus_6 = visual.TextStim(win=win, name='stimulus_6',
    text='W',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-6.0);
stimulus_8 = visual.TextStim(win=win, name='stimulus_8',
    text='P',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-7.0);
stumulus_7 = visual.TextStim(win=win, name='stumulus_7',
    text='A',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-8.0);
stimulus_9 = visual.TextStim(win=win, name='stimulus_9',
    text='F',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-9.0);
stimulus_10 = visual.TextStim(win=win, name='stimulus_10',
    text='L',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-10.0);

# Initialize components for Routine "begin"
beginClock = core.Clock()

# Set experiment start values for variable component blockCount
blockCount = 0
blockCountContainer = []

# Initialize components for Routine "tap"
tapClock = core.Clock()
text_9 = visual.TextStim(win=win, name='text_9',
    text='',
    font='Arial',
    pos=(0, 0), height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);

# Initialize components for Routine "trial"
trialClock = core.Clock()
stimulus_1 = visual.TextStim(win=win, name='stimulus_1',
    text='default text',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-1.0);
stimulus_2 = visual.TextStim(win=win, name='stimulus_2',
    text='O',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-2.0);
stimulus_3 = visual.TextStim(win=win, name='stimulus_3',
    text='X',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-3.0);
stimulus_4 = visual.TextStim(win=win, name='stimulus_4',
    text='E',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-4.0);
stimulus_5 = visual.TextStim(win=win, name='stimulus_5',
    text='H',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-5.0);
stimulus_6 = visual.TextStim(win=win, name='stimulus_6',
    text='W',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-6.0);
stimulus_8 = visual.TextStim(win=win, name='stimulus_8',
    text='P',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-7.0);
stumulus_7 = visual.TextStim(win=win, name='stumulus_7',
    text='A',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-8.0);
stimulus_9 = visual.TextStim(win=win, name='stimulus_9',
    text='F',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-9.0);
stimulus_10 = visual.TextStim(win=win, name='stimulus_10',
    text='L',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-10.0);

# Initialize components for Routine "begin"
beginClock = core.Clock()

# Set experiment start values for variable component blockCount
blockCount = 0
blockCountContainer = []

# Initialize components for Routine "tap"
tapClock = core.Clock()
text_9 = visual.TextStim(win=win, name='text_9',
    text='',
    font='Arial',
    pos=(0, 0), height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);

# Initialize components for Routine "trial"
trialClock = core.Clock()
stimulus_1 = visual.TextStim(win=win, name='stimulus_1',
    text='default text',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-1.0);
stimulus_2 = visual.TextStim(win=win, name='stimulus_2',
    text='O',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-2.0);
stimulus_3 = visual.TextStim(win=win, name='stimulus_3',
    text='X',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-3.0);
stimulus_4 = visual.TextStim(win=win, name='stimulus_4',
    text='E',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-4.0);
stimulus_5 = visual.TextStim(win=win, name='stimulus_5',
    text='H',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-5.0);
stimulus_6 = visual.TextStim(win=win, name='stimulus_6',
    text='W',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-6.0);
stimulus_8 = visual.TextStim(win=win, name='stimulus_8',
    text='P',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-7.0);
stumulus_7 = visual.TextStim(win=win, name='stumulus_7',
    text='A',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-8.0);
stimulus_9 = visual.TextStim(win=win, name='stimulus_9',
    text='F',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-9.0);
stimulus_10 = visual.TextStim(win=win, name='stimulus_10',
    text='L',
    font='Arial',
    pos=[0,0], height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-10.0);

# Initialize components for Routine "end"
endClock = core.Clock()
text_4 = visual.TextStim(win=win, name='text_4',
    text='That is the end of this task.\nPlease call the experimenter for further instructions.',
    font='Arial',
    pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);

# Create some handy timers
globalClock = core.Clock()  # to track the time since experiment started
routineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine 

# ------Prepare to start Routine "welcome"-------
t = 0
welcomeClock.reset()  # clock
frameN = -1
continueRoutine = True
# update component parameters for each repeat
key_resp_5 = keyboard.Keyboard()
# keep track of which components have finished
welcomeComponents = [text, key_resp_5]
for thisComponent in welcomeComponents:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

if trackEyes == 1:
    # start recording pupil
    pupil_remote.send_string("R")
    pupil_remote.recv_string()

# -------Start Routine "welcome"-------
while continueRoutine:
    # get current time
    t = welcomeClock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *text* updates
    if t >= 0.0 and text.status == NOT_STARTED:
        # keep track of start time/frame for later
        text.tStart = t  # not accounting for scr refresh
        text.frameNStart = frameN  # exact frame index
        win.timeOnFlip(text, 'tStartRefresh')  # time at next scr refresh
        text.setAutoDraw(True)
    
    # *key_resp_5* updates
    if t >= 0.0 and key_resp_5.status == NOT_STARTED:
        # keep track of start time/frame for later
        key_resp_5.tStart = t  # not accounting for scr refresh
        key_resp_5.frameNStart = frameN  # exact frame index
        win.timeOnFlip(key_resp_5, 'tStartRefresh')  # time at next scr refresh
        key_resp_5.status = STARTED
        # keyboard checking is just starting
        win.callOnFlip(key_resp_5.clock.reset)  # t=0 on next screen flip
        key_resp_5.clearEvents(eventType='keyboard')
    if key_resp_5.status == STARTED:
        theseKeys = key_resp_5.getKeys(keyList=None, waitRelease=False)
        if len(theseKeys):
            theseKeys = theseKeys[0]  # at least one key was pressed
            
            # check for quit:
            if "escape" == theseKeys:
                endExpNow = True
            key_resp_5.keys = theseKeys.name  # just the last key pressed
            key_resp_5.rt = theseKeys.rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in welcomeComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "welcome"-------
for thisComponent in welcomeComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('text.started', text.tStartRefresh)
thisExp.addData('text.stopped', text.tStopRefresh)
# check responses
if key_resp_5.keys in ['', [], None]:  # No response was made
    key_resp_5.keys = None
thisExp.addData('key_resp_5.keys',key_resp_5.keys)
if key_resp_5.keys != None:  # we had a response
    thisExp.addData('key_resp_5.rt', key_resp_5.rt)
thisExp.addData('key_resp_5.started', key_resp_5.tStartRefresh)
thisExp.addData('key_resp_5.stopped', key_resp_5.tStopRefresh)
thisExp.nextEntry()
# the Routine "welcome" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# ------Prepare to start Routine "instr1"-------
t = 0
instr1Clock.reset()  # clock
frameN = -1
continueRoutine = True
# update component parameters for each repeat
key_resp_4 = keyboard.Keyboard()
# keep track of which components have finished
instr1Components = [text_5, key_resp_4]
for thisComponent in instr1Components:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# -------Start Routine "instr1"-------
while continueRoutine:
    # get current time
    t = instr1Clock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *text_5* updates
    if t >= 0.0 and text_5.status == NOT_STARTED:
        # keep track of start time/frame for later
        text_5.tStart = t  # not accounting for scr refresh
        text_5.frameNStart = frameN  # exact frame index
        win.timeOnFlip(text_5, 'tStartRefresh')  # time at next scr refresh
        text_5.setAutoDraw(True)
    
    # *key_resp_4* updates
    if t >= 0.0 and key_resp_4.status == NOT_STARTED:
        # keep track of start time/frame for later
        key_resp_4.tStart = t  # not accounting for scr refresh
        key_resp_4.frameNStart = frameN  # exact frame index
        win.timeOnFlip(key_resp_4, 'tStartRefresh')  # time at next scr refresh
        key_resp_4.status = STARTED
        # keyboard checking is just starting
        win.callOnFlip(key_resp_4.clock.reset)  # t=0 on next screen flip
        key_resp_4.clearEvents(eventType='keyboard')
    if key_resp_4.status == STARTED:
        theseKeys = key_resp_4.getKeys(keyList=None, waitRelease=False)
        if len(theseKeys):
            theseKeys = theseKeys[0]  # at least one key was pressed
            
            # check for quit:
            if "escape" == theseKeys:
                endExpNow = True
            key_resp_4.keys = theseKeys.name  # just the last key pressed
            key_resp_4.rt = theseKeys.rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in instr1Components:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "instr1"-------
for thisComponent in instr1Components:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('text_5.started', text_5.tStartRefresh)
thisExp.addData('text_5.stopped', text_5.tStopRefresh)
# check responses
if key_resp_4.keys in ['', [], None]:  # No response was made
    key_resp_4.keys = None
thisExp.addData('key_resp_4.keys',key_resp_4.keys)
if key_resp_4.keys != None:  # we had a response
    thisExp.addData('key_resp_4.rt', key_resp_4.rt)
thisExp.addData('key_resp_4.started', key_resp_4.tStartRefresh)
thisExp.addData('key_resp_4.stopped', key_resp_4.tStopRefresh)
thisExp.nextEntry()
# the Routine "instr1" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# ------Prepare to start Routine "instr2"-------
t = 0
instr2Clock.reset()  # clock
frameN = -1
continueRoutine = True
# update component parameters for each repeat
key_resp_3 = keyboard.Keyboard()
# keep track of which components have finished
instr2Components = [text_7, key_resp_3]
for thisComponent in instr2Components:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# -------Start Routine "instr2"-------
while continueRoutine:
    # get current time
    t = instr2Clock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *text_7* updates
    if t >= 0.0 and text_7.status == NOT_STARTED:
        # keep track of start time/frame for later
        text_7.tStart = t  # not accounting for scr refresh
        text_7.frameNStart = frameN  # exact frame index
        win.timeOnFlip(text_7, 'tStartRefresh')  # time at next scr refresh
        text_7.setAutoDraw(True)
    
    # *key_resp_3* updates
    if t >= 0.0 and key_resp_3.status == NOT_STARTED:
        # keep track of start time/frame for later
        key_resp_3.tStart = t  # not accounting for scr refresh
        key_resp_3.frameNStart = frameN  # exact frame index
        win.timeOnFlip(key_resp_3, 'tStartRefresh')  # time at next scr refresh
        key_resp_3.status = STARTED
        # keyboard checking is just starting
        win.callOnFlip(key_resp_3.clock.reset)  # t=0 on next screen flip
    if key_resp_3.status == STARTED:
        theseKeys = key_resp_3.getKeys(keyList=None, waitRelease=False)
        if len(theseKeys):
            theseKeys = theseKeys[0]  # at least one key was pressed
            
            # check for quit:
            if "escape" == theseKeys:
                endExpNow = True
            key_resp_3.keys = theseKeys.name  # just the last key pressed
            key_resp_3.rt = theseKeys.rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in instr2Components:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "instr2"-------
for thisComponent in instr2Components:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('text_7.started', text_7.tStartRefresh)
thisExp.addData('text_7.stopped', text_7.tStopRefresh)
# check responses
if key_resp_3.keys in ['', [], None]:  # No response was made
    key_resp_3.keys = None
thisExp.addData('key_resp_3.keys',key_resp_3.keys)
if key_resp_3.keys != None:  # we had a response
    thisExp.addData('key_resp_3.rt', key_resp_3.rt)
thisExp.addData('key_resp_3.started', key_resp_3.tStartRefresh)
thisExp.addData('key_resp_3.stopped', key_resp_3.tStopRefresh)
thisExp.nextEntry()
# the Routine "instr2" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# ------Prepare to start Routine "instr3"-------
t = 0
instr3Clock.reset()  # clock
frameN = -1
continueRoutine = True
# update component parameters for each repeat
key_resp_2 = keyboard.Keyboard()
# keep track of which components have finished
instr3Components = [text_6, key_resp_2]
for thisComponent in instr3Components:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# -------Start Routine "instr3"-------
while continueRoutine:
    # get current time
    t = instr3Clock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *text_6* updates
    if t >= 0.0 and text_6.status == NOT_STARTED:
        # keep track of start time/frame for later
        text_6.tStart = t  # not accounting for scr refresh
        text_6.frameNStart = frameN  # exact frame index
        win.timeOnFlip(text_6, 'tStartRefresh')  # time at next scr refresh
        text_6.setAutoDraw(True)
    
    # *key_resp_2* updates
    if t >= 0.0 and key_resp_2.status == NOT_STARTED:
        # keep track of start time/frame for later
        key_resp_2.tStart = t  # not accounting for scr refresh
        key_resp_2.frameNStart = frameN  # exact frame index
        win.timeOnFlip(key_resp_2, 'tStartRefresh')  # time at next scr refresh
        key_resp_2.status = STARTED
        # keyboard checking is just starting
        win.callOnFlip(key_resp_2.clock.reset)  # t=0 on next screen flip
        key_resp_2.clearEvents(eventType='keyboard')
    if key_resp_2.status == STARTED:
        theseKeys = key_resp_2.getKeys(keyList=None, waitRelease=False)
        if len(theseKeys):
            theseKeys = theseKeys[0]  # at least one key was pressed
            
            # check for quit:
            if "escape" == theseKeys:
                endExpNow = True
            key_resp_2.keys = theseKeys.name  # just the last key pressed
            key_resp_2.rt = theseKeys.rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in instr3Components:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "instr3"-------
for thisComponent in instr3Components:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('text_6.started', text_6.tStartRefresh)
thisExp.addData('text_6.stopped', text_6.tStopRefresh)
# check responses
if key_resp_2.keys in ['', [], None]:  # No response was made
    key_resp_2.keys = None
thisExp.addData('key_resp_2.keys',key_resp_2.keys)
if key_resp_2.keys != None:  # we had a response
    thisExp.addData('key_resp_2.rt', key_resp_2.rt)
thisExp.addData('key_resp_2.started', key_resp_2.tStartRefresh)
thisExp.addData('key_resp_2.stopped', key_resp_2.tStopRefresh)
thisExp.nextEntry()
# the Routine "instr3" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# Start practice trials!

# set up handler to look after randomisation of conditions etc
conditions0 = data.TrialHandler(nReps=1, method='random', 
    extraInfo=expInfo, originPath=-1,
    trialList=data.importConditions('video_conditions.csv', selection='0:3'),
    seed=None, name='conditions0')
thisExp.addLoop(conditions0)  # add the loop to the experiment
thisConditions0 = conditions0.trialList[0]  # so we can initialise stimuli with some values
# abbreviate parameter names if possible (e.g. rgb = thisConditions2.rgb)
if thisConditions0 != None:
    for paramName in thisConditions0:
        exec('{} = thisConditions0[paramName]'.format(paramName))

for thisConditions0 in conditions0:
    currentLoop = conditions0
    # abbreviate parameter names if possible (e.g. rgb = thisConditions2.rgb)
    if thisConditions0 != None:
        for paramName in thisConditions0:
            exec('{} = thisConditions0[paramName]'.format(paramName))
    
    # ------Prepare to start Routine "begin"-------
    t = 0
    beginClock.reset()  # clock
    frameN = -1
    continueRoutine = True
    # update component parameters for each repeat
    key_resp_6 = keyboard.Keyboard()
    blockCount = blockCount + 1  # Set routine start values for blockCount
    # keep track of which components have finished
    if blockCount == 1: # Different text for the first trial
        text_8 = visual.TextStim(win=win, name='text_8',
            text="We will now begin the practice trials.\n\nPress 'space' to begin.\n\nIt may take a while to load, but please only press the button once.",
            font='Arial',
            pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);
        text_11 = visual.TextStim(win=win, name='text_11',
            text=" ",
            font='Arial',
            pos=(0, -0.1), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);
    else: 
        text_8 = visual.TextStim(win=win, name='text_8',
            text="Take a short break.",
            font='Arial',
            pos=(0, 0.2), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);
        text_11 = visual.TextStim(win=win, name='text_11',
            text="Press 'space' to begin the next practice session.\n\nIt may take a while to load, but please only press the button once.",
            font='Arial',
            pos=(0, -0.1), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);

    beginComponents = [text_8, text_11, key_resp_6]
    for thisComponent in beginComponents:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    
    # -------Start Routine "begin"-------
    while continueRoutine:
        # get current time
        t = beginClock.getTime()
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        if blockCount == 1:
            # *text_8* updates
            if t > 0 and text_8.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_8.tStart = t  # not accounting for scr refresh
                text_8.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_8, 'tStartRefresh')  # time at next scr refresh
                text_8.setAutoDraw(True)
            if t > 3.0 and text_11.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_11.tStart = t  # not accounting for scr refresh
                text_11.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_11, 'tStartRefresh')  # time at next scr refresh
                text_11.setAutoDraw(True)
        else:
            # *text_8* updates
            if t > 0 and text_8.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_8.tStart = t  # not accounting for scr refresh
                text_8.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_8, 'tStartRefresh')  # time at next scr refresh
                text_8.setAutoDraw(True)
            # *text_11* updates
            if t >= 5.0 and text_11.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_11.tStart = t  # not accounting for scr refresh
                text_11.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_11, 'tStartRefresh')  # time at next scr refresh
                text_11.setAutoDraw(True)
        
        # *key_resp_6* updates
        if key_resp_6.status == NOT_STARTED:
            # keep track of start time/frame for later
            key_resp_6.tStart = t  # not accounting for scr refresh
            key_resp_6.frameNStart = frameN  # exact frame index
            win.timeOnFlip(key_resp_6, 'tStartRefresh')  # time at next scr refresh
            key_resp_6.status = STARTED
            # keyboard checking is just starting
            win.callOnFlip(key_resp_6.clock.reset)  # t=0 on next screen flip
            key_resp_6.clearEvents(eventType='keyboard')
        if key_resp_6.status == STARTED:
            theseKeys = key_resp_6.getKeys(keyList=['space'], waitRelease=False)
            if len(theseKeys):
                theseKeys = theseKeys[0]  # at least one key was pressed
                
                # check for quit:
                if "escape" == theseKeys:
                    endExpNow = True
                key_resp_6.keys = theseKeys.name  # just the last key pressed
                key_resp_6.rt = theseKeys.rt
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
            core.quit()
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in beginComponents:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # -------Ending Routine "begin"-------
    for thisComponent in beginComponents:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    conditions0.addData('text_8.started', text_8.tStartRefresh)
    conditions0.addData('text_8.stopped', text_8.tStopRefresh)
    conditions0.addData('text_11.started', text_11.tStartRefresh)
    conditions0.addData('text_11.stopped', text_11.tStopRefresh)
    # check responses
    if key_resp_6.keys in ['', [], None]:  # No response was made
        key_resp_6.keys = None
    conditions0.addData('key_resp_6.keys',key_resp_6.keys)
    if key_resp_6.keys != None:  # we had a response
        conditions0.addData('key_resp_6.rt', key_resp_6.rt)
    conditions0.addData('key_resp_6.started', key_resp_6.tStartRefresh)
    conditions0.addData('key_resp_6.stopped', key_resp_6.tStopRefresh)
    thisExp.addData('blockCount.routineEndVal', blockCount)  # Save end routine value
    # the Routine "begin" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset()
    
    # ------Prepare to start Routine "tap"-------
    t = 0
    # tapClock.reset()  # clock moved down
    frameN = -1
    continueRoutine = True
    # update component parameters for each repeat
    print('loading video')
    movie_2 = visual.MovieStim3(
        win=win, name='movie_2',units='pix', 
        noAudio = False,
        filename=file_name,
        ori=0, pos=(0, 0), opacity=1,
        loop=False,
        size=[1920, 1080],
        depth=-1.0,
        )
    print('loaded video')
    
    # keep track of which components have finished
    tapComponents = [text_9] # remove video and mic
    for thisComponent in tapComponents:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    
    # -------Start Routine "tap"-------

    movie_2.setAutoDraw(True) # begin movie playback
    movie_2.tStart = globalClock.getTime() # record movie start time
    print('playing video')
    tapClock.reset() # moved here to fix timing issues of letters
    
    if trackEyes == 1:
        # annotate Pupil Core
        label = "condition_start"
        duration = 0.
        condition_trigger = new_trigger(label, duration)
        condition_trigger["trial"] = blockCount
        condition_trigger["condition"] = condition
        send_trigger(condition_trigger)
    
    while continueRoutine:
        # get current time
        t = tapClock.getTime()
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_9* updates
        if t >= 2.5 and text_9.status == NOT_STARTED:
            # keep track of start time/frame for later
            text_9.tStart = t  # not accounting for scr refresh
            text_9.frameNStart = frameN  # exact frame index
            win.timeOnFlip(text_9, 'tStartRefresh')  # time at next scr refresh
            text_9.setAutoDraw(True)
        frameRemains = 2.5 + 5- win.monitorFramePeriod * 0.75  # most of one frame period left
        if text_9.status == STARTED and t >= frameRemains:
            # keep track of stop time/frame for later
            text_9.tStop = t  # not accounting for scr refresh
            text_9.frameNStop = frameN  # exact frame index
            win.timeOnFlip(text_9, 'tStopRefresh')  # time at next scr refresh
            text_9.setAutoDraw(False) 
        
        # removed movie and mic from loop
        
        # check for quit (typically the Esc key)
        if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
            core.quit()
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in tapComponents:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # -------Ending Routine "tap"-------
    for thisComponent in tapComponents:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    conditions0.addData('text_9.started', text_9.tStartRefresh)
    conditions0.addData('text_9.stopped', text_9.tStopRefresh)
    conditions0.addData('movie_2.started', movie_2.tStart)

    # the Routine "tap" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset()
    
    # set up handler to look after randomisation of conditions etc
    trials0 = data.TrialHandler(nReps=1, method='random', 
        extraInfo=expInfo, originPath=-1,
        trialList=data.importConditions('letter_conditions1.csv', selection='0:10'),
        seed=None, name='trials0')
    thisExp.addLoop(trials0)  # add the loop to the experiment
    thisTrials0 = trials0.trialList[0]  # so we can initialise stimuli with some values
    # abbreviate parameter names if possible (e.g. rgb = thisTrials2.rgb)
    if thisTrials0 != None:
        for paramName in thisTrials0:
            exec('{} = thisTrials0[paramName]'.format(paramName))
    
    for thisTrials0 in trials0:
        currentLoop = trials0
        # abbreviate parameter names if possible (e.g. rgb = thisTrials2.rgb)
        if thisTrials0 != None:
            for paramName in thisTrials0:
                exec('{} = thisTrials0[paramName]'.format(paramName))
        
        # ------Prepare to start Routine "trial"-------
        t = 0
        trialClock.reset()  # clock
        frameN = -1
        continueRoutine = True
        # update component parameters for each repeat
        key_resp = keyboard.Keyboard()
        stimulus_1.setPos((PositionX1, PositionY1))
        stimulus_1.setText(letter1)
        stimulus_2.setPos((PositionX2, PositionY2))
        stimulus_3.setPos((PositionX3, PositionY3))
        stimulus_4.setPos((PositionX4, PositionY4))
        stimulus_5.setPos((PositionX5, PositionY5))
        stimulus_6.setPos((PositionX6, PositionY6))
        stimulus_8.setPos((PositionX8, PositionY8))
        stumulus_7.setPos((PositionX7, PositionY7))
        stimulus_9.setPos((PositionX9, PositionY9))
        stimulus_10.setPos((PositionX10, PositionY10))
        # keep track of which components have finished
        trialComponents = [key_resp, stimulus_1, stimulus_2, stimulus_3, stimulus_4, stimulus_5, stimulus_6, stimulus_8, stumulus_7, stimulus_9, stimulus_10]
        for thisComponent in trialComponents:
            thisComponent.tStart = None
            thisComponent.tStop = None
            thisComponent.tStartRefresh = None
            thisComponent.tStopRefresh = None
            if hasattr(thisComponent, 'status'):
                thisComponent.status = NOT_STARTED
        
        # -------Start Routine "trial"-------
        while continueRoutine:
            # get current time
            t = trialClock.getTime()
            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
            # update/draw components on each frame
            
            # *key_resp* updates
            if t >= 0.5 and key_resp.status == NOT_STARTED:
                # keep track of start time/frame for later
                key_resp.tStart = t  # not accounting for scr refresh
                key_resp.frameNStart = frameN  # exact frame index
                win.timeOnFlip(key_resp, 'tStartRefresh')  # time at next scr refresh
                key_resp.status = STARTED
                # keyboard checking is just starting
                win.callOnFlip(key_resp.clock.reset)  # t=0 on next screen flip
                key_resp.clearEvents(eventType='keyboard')
            if key_resp.status == STARTED:
                theseKeys = key_resp.getKeys(keyList=['n', 'm'], waitRelease=False)
                if len(theseKeys):
                    theseKeys = theseKeys[0]  # at least one key was pressed
                    
                    # check for quit:
                    if "escape" == theseKeys:
                        endExpNow = True
                    key_resp.keys = theseKeys.name  # just the last key pressed
                    key_resp.rt = theseKeys.rt
                    # was this 'correct'?
                    if (key_resp.keys == str(corrAns)) or (key_resp.keys == corrAns):
                        key_resp.corr = 1
                    else:
                        key_resp.corr = 0
                    # a response ends the routine
                    continueRoutine = False
            
            # *stimulus_1* updates
            if t >= 0.5 and stimulus_1.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_1.tStart = t  # not accounting for scr refresh
                stimulus_1.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_1, 'tStartRefresh')  # time at next scr refresh
                stimulus_1.setAutoDraw(True)
            
            # *stimulus_2* updates
            if t >= 0.5 and stimulus_2.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_2.tStart = t  # not accounting for scr refresh
                stimulus_2.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_2, 'tStartRefresh')  # time at next scr refresh
                stimulus_2.setAutoDraw(True)
            
            # *stimulus_3* updates
            if t >= 0.5 and stimulus_3.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_3.tStart = t  # not accounting for scr refresh
                stimulus_3.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_3, 'tStartRefresh')  # time at next scr refresh
                stimulus_3.setAutoDraw(True)
            
            # *stimulus_4* updates
            if t >= 0.5 and stimulus_4.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_4.tStart = t  # not accounting for scr refresh
                stimulus_4.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_4, 'tStartRefresh')  # time at next scr refresh
                stimulus_4.setAutoDraw(True)
            
            # *stimulus_5* updates
            if t >= 0.5 and stimulus_5.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_5.tStart = t  # not accounting for scr refresh
                stimulus_5.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_5, 'tStartRefresh')  # time at next scr refresh
                stimulus_5.setAutoDraw(True)
            
            # *stimulus_6* updates
            if t >= 0.5 and stimulus_6.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_6.tStart = t  # not accounting for scr refresh
                stimulus_6.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_6, 'tStartRefresh')  # time at next scr refresh
                stimulus_6.setAutoDraw(True)
            
            # *stimulus_8* updates
            if t >= 0.5 and stimulus_8.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_8.tStart = t  # not accounting for scr refresh
                stimulus_8.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_8, 'tStartRefresh')  # time at next scr refresh
                stimulus_8.setAutoDraw(True)
            
            # *stumulus_7* updates
            if t >= 0.5 and stumulus_7.status == NOT_STARTED:
                # keep track of start time/frame for later
                stumulus_7.tStart = t  # not accounting for scr refresh
                stumulus_7.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stumulus_7, 'tStartRefresh')  # time at next scr refresh
                stumulus_7.setAutoDraw(True)
            
            # *stimulus_9* updates
            if t >= 0.5 and stimulus_9.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_9.tStart = t  # not accounting for scr refresh
                stimulus_9.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_9, 'tStartRefresh')  # time at next scr refresh
                stimulus_9.setAutoDraw(True)
            
            # *stimulus_10* updates
            if t >= 0.5 and stimulus_10.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_10.tStart = t  # not accounting for scr refresh
                stimulus_10.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_10, 'tStartRefresh')  # time at next scr refresh
                stimulus_10.setAutoDraw(True)
            
            # check for quit (typically the Esc key)
            if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
                core.quit()
            
            # check if all components have finished
            if not continueRoutine:  # a component has requested a forced-end of Routine
                break
            continueRoutine = False  # will revert to True if at least one component still running
            for thisComponent in trialComponents:
                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                    continueRoutine = True
                    break  # at least one component has not yet finished
            
            # refresh the screen
            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
                win.flip()
        
        # -------Ending Routine "trial"-------
        for thisComponent in trialComponents:
            if hasattr(thisComponent, "setAutoDraw"):
                thisComponent.setAutoDraw(False)
        # check responses
        if key_resp.keys in ['', [], None]:  # No response was made
            key_resp.keys = None
            # was no response the correct answer?!
            if str(corrAns).lower() == 'none':
               key_resp.corr = 1;  # correct non-response
            else:
               key_resp.corr = 0;  # failed to respond (incorrectly)
        # store data for trials2 (TrialHandler)
        trials0.addData('key_resp.keys',key_resp.keys)
        trials0.addData('key_resp.corr', key_resp.corr)
        if key_resp.keys != None:  # we had a response
            trials0.addData('key_resp.rt', key_resp.rt)
        trials0.addData('key_resp.started', key_resp.tStartRefresh)
        trials0.addData('key_resp.stopped', key_resp.tStopRefresh)
        trials0.addData('stimulus_1.started', stimulus_1.tStartRefresh)
        trials0.addData('stimulus_1.stopped', stimulus_1.tStopRefresh)
        trials0.addData('stimulus_2.started', stimulus_2.tStartRefresh)
        trials0.addData('stimulus_2.stopped', stimulus_2.tStopRefresh)
        trials0.addData('stimulus_3.started', stimulus_3.tStartRefresh)
        trials0.addData('stimulus_3.stopped', stimulus_3.tStopRefresh)
        trials0.addData('stimulus_4.started', stimulus_4.tStartRefresh)
        trials0.addData('stimulus_4.stopped', stimulus_4.tStopRefresh)
        trials0.addData('stimulus_5.started', stimulus_5.tStartRefresh)
        trials0.addData('stimulus_5.stopped', stimulus_5.tStopRefresh)
        trials0.addData('stimulus_6.started', stimulus_6.tStartRefresh)
        trials0.addData('stimulus_6.stopped', stimulus_6.tStopRefresh)
        trials0.addData('stimulus_8.started', stimulus_8.tStartRefresh)
        trials0.addData('stimulus_8.stopped', stimulus_8.tStopRefresh)
        trials0.addData('stumulus_7.started', stumulus_7.tStartRefresh)
        trials0.addData('stumulus_7.stopped', stumulus_7.tStopRefresh)
        trials0.addData('stimulus_9.started', stimulus_9.tStartRefresh)
        trials0.addData('stimulus_9.stopped', stimulus_9.tStopRefresh)
        trials0.addData('stimulus_10.started', stimulus_10.tStartRefresh)
        trials0.addData('stimulus_10.stopped', stimulus_10.tStopRefresh)
        # the Routine "trial" was not non-slip safe, so reset the non-slip timer
        routineTimer.reset()
        thisExp.nextEntry()
        
    # completed 1 repeats of 'trials2'
    
    movie_2.stop() # stop movie
    movie_2.tStop = globalClock.getTime() # record movie stop time
    
    if trackEyes == 1:
        # annotate Pupil Core
        label = "condition_end"
        duration = 0.
        condition_trigger = new_trigger(label, duration)
        condition_trigger["trial"] = blockCount
        condition_trigger["condition"] = condition
        send_trigger(condition_trigger)

    # store data for conditions1 (TrialHandler)

    conditions0.addData('movie_2.timeStopped', movie_2.tStop)
    
    thisExp.nextEntry()
    
# completed 1 repeats of 'conditions0'

# ------Prepare to start Routine "begin_prac"-------
# moved from before practice session to after practice session. Name not changed.

t = 0
begin_pracClock.reset()  # clock
frameN = -1
continueRoutine = True
# update component parameters for each repeat
key_resp_8 = keyboard.Keyboard()
# keep track of which components have finished
begin_pracComponents = [text_10, key_resp_8]
for thisComponent in begin_pracComponents:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# -------Start Routine "begin_prac"-------
while continueRoutine:
    # get current time
    t = begin_pracClock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *text_10* updates
    if t >= 0.0 and text_10.status == NOT_STARTED:
        # keep track of start time/frame for later
        text_10.tStart = t  # not accounting for scr refresh
        text_10.frameNStart = frameN  # exact frame index
        win.timeOnFlip(text_10, 'tStartRefresh')  # time at next scr refresh
        text_10.setAutoDraw(True)
    
    # *key_resp_8* updates
    if t >= 0.0 and key_resp_8.status == NOT_STARTED:
        # keep track of start time/frame for later
        key_resp_8.tStart = t  # not accounting for scr refresh
        key_resp_8.frameNStart = frameN  # exact frame index
        win.timeOnFlip(key_resp_8, 'tStartRefresh')  # time at next scr refresh
        key_resp_8.status = STARTED
        # keyboard checking is just starting
        win.callOnFlip(key_resp_8.clock.reset)  # t=0 on next screen flip
        key_resp_8.clearEvents(eventType='keyboard')
    if key_resp_8.status == STARTED:
        theseKeys = key_resp_8.getKeys(keyList=['space'], waitRelease=False)
        if len(theseKeys):
            theseKeys = theseKeys[0]  # at least one key was pressed
            
            # check for quit:
            if "escape" == theseKeys:
                endExpNow = True
            key_resp_8.keys = theseKeys.name  # just the last key pressed
            key_resp_8.rt = theseKeys.rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in begin_pracComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "begin_prac"-------
for thisComponent in begin_pracComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('text_10.started', text_10.tStartRefresh)
thisExp.addData('text_10.stopped', text_10.tStopRefresh)
# check responses
if key_resp_8.keys in ['', [], None]:  # No response was made
    key_resp_8.keys = None
thisExp.addData('key_resp_8.keys',key_resp_8.keys)
if key_resp_8.keys != None:  # we had a response
    thisExp.addData('key_resp_8.rt', key_resp_8.rt)
thisExp.addData('key_resp_8.started', key_resp_8.tStartRefresh)
thisExp.addData('key_resp_8.stopped', key_resp_8.tStopRefresh)
thisExp.nextEntry()
# the Routine "begin_prac" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# Now the real trials begin!

# set up handler to look after randomisation of conditions etc
conditions1 = data.TrialHandler(nReps=1, method='random', 
    extraInfo=expInfo, originPath=-1,
    trialList=data.importConditions('video_conditions.csv', selection='0:3'),
    seed=None, name='conditions1')
thisExp.addLoop(conditions1)  # add the loop to the experiment
thisConditions1 = conditions1.trialList[0]  # so we can initialise stimuli with some values
# abbreviate parameter names if possible (e.g. rgb = thisConditions1.rgb)
if thisConditions1 != None:
    for paramName in thisConditions1:
        exec('{} = thisConditions1[paramName]'.format(paramName))

for thisConditions1 in conditions1:
    currentLoop = conditions1
    # abbreviate parameter names if possible (e.g. rgb = thisConditions1.rgb)
    if thisConditions1 != None:
        for paramName in thisConditions1:
            exec('{} = thisConditions1[paramName]'.format(paramName))
    
    # ------Prepare to start Routine "begin"-------
    t = 0
    beginClock.reset()  # clock
    frameN = -1
    continueRoutine = True
    # update component parameters for each repeat
    key_resp_6 = keyboard.Keyboard()
    blockCount = blockCount + 1  # Set routine start values for blockCount
    # keep track of which components have finished
    if blockCount == 4: # Different text for the first trial
        text_8 = visual.TextStim(win=win, name='text_8',
            text="Press 'space' to begin the first session.\n\nIt may take a while to load, but please only press the button once.",
            font='Arial',
            pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);
        text_11 = visual.TextStim(win=win, name='text_11',
            text=" ",
            font='Arial',
            pos=(0, -0.1), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);
    else: 
        sessionNumber = blockCount - 3 # for labelling purposes to give participant an update on progress
        text_8 = visual.TextStim(win=win, name='text_8',
            text="Take a short break.",
            font='Arial',
            pos=(0, 0.2), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);
        text_11 = visual.TextStim(win=win, name='text_11',
            text="Press 'space' to begin session {} out of 6.\n\nIt may take a while to load, but please only press the button once.".format(sessionNumber),
            font='Arial',
            pos=(0, -0.1), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);

    beginComponents = [text_8, text_11, key_resp_6]
    for thisComponent in beginComponents:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    
    # -------Start Routine "begin"-------
    while continueRoutine:
        # get current time
        t = beginClock.getTime()
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        if blockCount == 4:
            # *text_8* updates
            if t > 0 and text_8.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_8.tStart = t  # not accounting for scr refresh
                text_8.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_8, 'tStartRefresh')  # time at next scr refresh
                text_8.setAutoDraw(True)
            if t > 0 and text_11.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_11.tStart = t  # not accounting for scr refresh
                text_11.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_11, 'tStartRefresh')  # time at next scr refresh
                text_11.setAutoDraw(True)
        else:
            # *text_8* updates
            if t > 0 and text_8.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_8.tStart = t  # not accounting for scr refresh
                text_8.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_8, 'tStartRefresh')  # time at next scr refresh
                text_8.setAutoDraw(True)
            # *text_11* updates
            if t > 5 and text_11.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_11.tStart = t  # not accounting for scr refresh
                text_11.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_11, 'tStartRefresh')  # time at next scr refresh
                text_11.setAutoDraw(True)
        
        # *key_resp_6* updates
        if key_resp_6.status == NOT_STARTED:
            # keep track of start time/frame for later
            key_resp_6.tStart = t  # not accounting for scr refresh
            key_resp_6.frameNStart = frameN  # exact frame index
            win.timeOnFlip(key_resp_6, 'tStartRefresh')  # time at next scr refresh
            key_resp_6.status = STARTED
            # keyboard checking is just starting
            win.callOnFlip(key_resp_6.clock.reset)  # t=0 on next screen flip
            key_resp_6.clearEvents(eventType='keyboard')
        if key_resp_6.status == STARTED:
            theseKeys = key_resp_6.getKeys(keyList=['space'], waitRelease=False)
            if len(theseKeys):
                theseKeys = theseKeys[0]  # at least one key was pressed
                
                # check for quit:
                if "escape" == theseKeys:
                    endExpNow = True
                key_resp_6.keys = theseKeys.name  # just the last key pressed
                key_resp_6.rt = theseKeys.rt
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
            core.quit()
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in beginComponents:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # -------Ending Routine "begin"-------
    for thisComponent in beginComponents:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    conditions0.addData('text_8.started', text_8.tStartRefresh)
    conditions0.addData('text_8.stopped', text_8.tStopRefresh)
    conditions0.addData('text_11.started', text_11.tStartRefresh)
    conditions0.addData('text_11.stopped', text_11.tStopRefresh)
    # check responses
    if key_resp_6.keys in ['', [], None]:  # No response was made
        key_resp_6.keys = None
    conditions0.addData('key_resp_6.keys',key_resp_6.keys)
    if key_resp_6.keys != None:  # we had a response
        conditions0.addData('key_resp_6.rt', key_resp_6.rt)
    conditions0.addData('key_resp_6.started', key_resp_6.tStartRefresh)
    conditions0.addData('key_resp_6.stopped', key_resp_6.tStopRefresh)
    thisExp.addData('blockCount.routineEndVal', blockCount)  # Save end routine value
    # the Routine "begin" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset()
    
    # ------Prepare to start Routine "tap"-------
    t = 0
    # tapClock.reset()  # clock moved down
    frameN = -1
    continueRoutine = True
    # update component parameters for each repeat
    movie_2 = visual.MovieStim3(
        win=win, name='movie_2',units='pix', 
        noAudio = False,
        filename=file_name,
        ori=0, pos=(0, 0), opacity=1,
        loop=False,
        size=[1920, 1080],
        depth=-1.0,
        )
   
    # keep track of which components have finished
    tapComponents = [text_9] # remove video and mic
    for thisComponent in tapComponents:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    
    # -------Start Routine "tap"-------
    
    movie_2.setAutoDraw(True) # begin movie playback
    movie_2.tStart = globalClock.getTime() # record movie start time
    
    tapClock.reset() # moved here to fix timing issues of letters
    
    if trackEyes == 1:
        # annotate Pupil Core
        label = "condition_start"
        duration = 0.
        condition_trigger = new_trigger(label, duration)
        condition_trigger["trial"] = blockCount
        condition_trigger["condition"] = condition
        send_trigger(condition_trigger)
    
    while continueRoutine:
        # get current time
        t = tapClock.getTime()
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_9* updates
        if t >= 2.5 and text_9.status == NOT_STARTED:
            # keep track of start time/frame for later
            text_9.tStart = t  # not accounting for scr refresh
            text_9.frameNStart = frameN  # exact frame index
            win.timeOnFlip(text_9, 'tStartRefresh')  # time at next scr refresh
            text_9.setAutoDraw(True)
        frameRemains = 2.5 + 5- win.monitorFramePeriod * 0.75  # most of one frame period left
        if text_9.status == STARTED and t >= frameRemains:
            # keep track of stop time/frame for later
            text_9.tStop = t  # not accounting for scr refresh
            text_9.frameNStop = frameN  # exact frame index
            win.timeOnFlip(text_9, 'tStopRefresh')  # time at next scr refresh
            text_9.setAutoDraw(False) 
        
        # removed movie and mic from loop
        
        # check for quit (typically the Esc key)
        if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
            core.quit()
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in tapComponents:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # -------Ending Routine "tap"-------
    for thisComponent in tapComponents:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    conditions1.addData('text_9.started', text_9.tStartRefresh)
    conditions1.addData('text_9.stopped', text_9.tStopRefresh)
    conditions1.addData('movie_2.started', movie_2.tStart)
    
    # the Routine "tap" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset()
    
    # set up handler to look after randomisation of conditions etc
    trials1 = data.TrialHandler(nReps=1, method='random', 
        extraInfo=expInfo, originPath=-1,
        trialList=data.importConditions('letter_conditions1.csv', selection='0:50'),
        seed=None, name='trials1')
    thisExp.addLoop(trials1)  # add the loop to the experiment
    thisTrials1 = trials1.trialList[0]  # so we can initialise stimuli with some values
    # abbreviate parameter names if possible (e.g. rgb = thisTrials1.rgb)
    if thisTrials1 != None:
        for paramName in thisTrials1:
            exec('{} = thisTrials1[paramName]'.format(paramName))
    
    for thisTrials1 in trials1:
        currentLoop = trials1
        # abbreviate parameter names if possible (e.g. rgb = thisTrials1.rgb)
        if thisTrials1 != None:
            for paramName in thisTrials1:
                exec('{} = thisTrials1[paramName]'.format(paramName))
        
        # ------Prepare to start Routine "trial"-------
        t = 0
        trialClock.reset()  # clock
        frameN = -1
        continueRoutine = True
        # update component parameters for each repeat
        key_resp = keyboard.Keyboard()
        stimulus_1.setPos((PositionX1, PositionY1))
        stimulus_1.setText(letter1)
        stimulus_2.setPos((PositionX2, PositionY2))
        stimulus_3.setPos((PositionX3, PositionY3))
        stimulus_4.setPos((PositionX4, PositionY4))
        stimulus_5.setPos((PositionX5, PositionY5))
        stimulus_6.setPos((PositionX6, PositionY6))
        stimulus_8.setPos((PositionX8, PositionY8))
        stumulus_7.setPos((PositionX7, PositionY7))
        stimulus_9.setPos((PositionX9, PositionY9))
        stimulus_10.setPos((PositionX10, PositionY10))
        # keep track of which components have finished
        trialComponents = [key_resp, stimulus_1, stimulus_2, stimulus_3, stimulus_4, stimulus_5, stimulus_6, stimulus_8, stumulus_7, stimulus_9, stimulus_10]
        for thisComponent in trialComponents:
            thisComponent.tStart = None
            thisComponent.tStop = None
            thisComponent.tStartRefresh = None
            thisComponent.tStopRefresh = None
            if hasattr(thisComponent, 'status'):
                thisComponent.status = NOT_STARTED
        
        # -------Start Routine "trial"-------
        while continueRoutine:
            # get current time
            t = trialClock.getTime()
            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
            # update/draw components on each frame
            
            # *key_resp* updates
            if t >= 0.5 and key_resp.status == NOT_STARTED:
                # keep track of start time/frame for later
                key_resp.tStart = t  # not accounting for scr refresh
                key_resp.frameNStart = frameN  # exact frame index
                win.timeOnFlip(key_resp, 'tStartRefresh')  # time at next scr refresh
                key_resp.status = STARTED
                # keyboard checking is just starting
                win.callOnFlip(key_resp.clock.reset)  # t=0 on next screen flip
                key_resp.clearEvents(eventType='keyboard')
            if key_resp.status == STARTED:
                theseKeys = key_resp.getKeys(keyList=['n', 'm'], waitRelease=False)
                if len(theseKeys):
                    theseKeys = theseKeys[0]  # at least one key was pressed
                    
                    # check for quit:
                    if "escape" == theseKeys:
                        endExpNow = True
                    key_resp.keys = theseKeys.name  # just the last key pressed
                    key_resp.rt = theseKeys.rt
                    # was this 'correct'?
                    if (key_resp.keys == str(corrAns)) or (key_resp.keys == corrAns):
                        key_resp.corr = 1
                    else:
                        key_resp.corr = 0
                    # a response ends the routine
                    continueRoutine = False
            
            # *stimulus_1* updates
            if t >= 0.5 and stimulus_1.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_1.tStart = t  # not accounting for scr refresh
                stimulus_1.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_1, 'tStartRefresh')  # time at next scr refresh
                stimulus_1.setAutoDraw(True)
            
            # *stimulus_2* updates
            if t >= 0.5 and stimulus_2.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_2.tStart = t  # not accounting for scr refresh
                stimulus_2.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_2, 'tStartRefresh')  # time at next scr refresh
                stimulus_2.setAutoDraw(True)
            
            # *stimulus_3* updates
            if t >= 0.5 and stimulus_3.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_3.tStart = t  # not accounting for scr refresh
                stimulus_3.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_3, 'tStartRefresh')  # time at next scr refresh
                stimulus_3.setAutoDraw(True)
            
            # *stimulus_4* updates
            if t >= 0.5 and stimulus_4.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_4.tStart = t  # not accounting for scr refresh
                stimulus_4.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_4, 'tStartRefresh')  # time at next scr refresh
                stimulus_4.setAutoDraw(True)
            
            # *stimulus_5* updates
            if t >= 0.5 and stimulus_5.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_5.tStart = t  # not accounting for scr refresh
                stimulus_5.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_5, 'tStartRefresh')  # time at next scr refresh
                stimulus_5.setAutoDraw(True)
            
            # *stimulus_6* updates
            if t >= 0.5 and stimulus_6.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_6.tStart = t  # not accounting for scr refresh
                stimulus_6.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_6, 'tStartRefresh')  # time at next scr refresh
                stimulus_6.setAutoDraw(True)
            
            # *stimulus_8* updates
            if t >= 0.5 and stimulus_8.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_8.tStart = t  # not accounting for scr refresh
                stimulus_8.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_8, 'tStartRefresh')  # time at next scr refresh
                stimulus_8.setAutoDraw(True)
            
            # *stumulus_7* updates
            if t >= 0.5 and stumulus_7.status == NOT_STARTED:
                # keep track of start time/frame for later
                stumulus_7.tStart = t  # not accounting for scr refresh
                stumulus_7.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stumulus_7, 'tStartRefresh')  # time at next scr refresh
                stumulus_7.setAutoDraw(True)
            
            # *stimulus_9* updates
            if t >= 0.5 and stimulus_9.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_9.tStart = t  # not accounting for scr refresh
                stimulus_9.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_9, 'tStartRefresh')  # time at next scr refresh
                stimulus_9.setAutoDraw(True)
            
            # *stimulus_10* updates
            if t >= 0.5 and stimulus_10.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_10.tStart = t  # not accounting for scr refresh
                stimulus_10.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_10, 'tStartRefresh')  # time at next scr refresh
                stimulus_10.setAutoDraw(True)
            
            # check for quit (typically the Esc key)
            if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
                core.quit()
            
            # check if all components have finished
            if not continueRoutine:  # a component has requested a forced-end of Routine
                break
            continueRoutine = False  # will revert to True if at least one component still running
            for thisComponent in trialComponents:
                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                    continueRoutine = True
                    break  # at least one component has not yet finished
            
            # refresh the screen
            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
                win.flip()
        
        # -------Ending Routine "trial"-------
        for thisComponent in trialComponents:
            if hasattr(thisComponent, "setAutoDraw"):
                thisComponent.setAutoDraw(False)
        # check responses
        if key_resp.keys in ['', [], None]:  # No response was made
            key_resp.keys = None
            # was no response the correct answer?!
            if str(corrAns).lower() == 'none':
               key_resp.corr = 1;  # correct non-response
            else:
               key_resp.corr = 0;  # failed to respond (incorrectly)
        # store data for trials1 (TrialHandler)
        trials1.addData('key_resp.keys',key_resp.keys)
        trials1.addData('key_resp.corr', key_resp.corr)
        if key_resp.keys != None:  # we had a response
            trials1.addData('key_resp.rt', key_resp.rt)
        trials1.addData('key_resp.started', key_resp.tStartRefresh)
        trials1.addData('key_resp.stopped', key_resp.tStopRefresh)
        trials1.addData('stimulus_1.started', stimulus_1.tStartRefresh)
        trials1.addData('stimulus_1.stopped', stimulus_1.tStopRefresh)
        trials1.addData('stimulus_2.started', stimulus_2.tStartRefresh)
        trials1.addData('stimulus_2.stopped', stimulus_2.tStopRefresh)
        trials1.addData('stimulus_3.started', stimulus_3.tStartRefresh)
        trials1.addData('stimulus_3.stopped', stimulus_3.tStopRefresh)
        trials1.addData('stimulus_4.started', stimulus_4.tStartRefresh)
        trials1.addData('stimulus_4.stopped', stimulus_4.tStopRefresh)
        trials1.addData('stimulus_5.started', stimulus_5.tStartRefresh)
        trials1.addData('stimulus_5.stopped', stimulus_5.tStopRefresh)
        trials1.addData('stimulus_6.started', stimulus_6.tStartRefresh)
        trials1.addData('stimulus_6.stopped', stimulus_6.tStopRefresh)
        trials1.addData('stimulus_8.started', stimulus_8.tStartRefresh)
        trials1.addData('stimulus_8.stopped', stimulus_8.tStopRefresh)
        trials1.addData('stumulus_7.started', stumulus_7.tStartRefresh)
        trials1.addData('stumulus_7.stopped', stumulus_7.tStopRefresh)
        trials1.addData('stimulus_9.started', stimulus_9.tStartRefresh)
        trials1.addData('stimulus_9.stopped', stimulus_9.tStopRefresh)
        trials1.addData('stimulus_10.started', stimulus_10.tStartRefresh)
        trials1.addData('stimulus_10.stopped', stimulus_10.tStopRefresh)
        # the Routine "trial" was not non-slip safe, so reset the non-slip timer
        routineTimer.reset()
        thisExp.nextEntry()
        
    # completed 1 repeats of 'trials1'
    
    movie_2.stop() # stop movie
    movie_2.tStop = globalClock.getTime() # movie stop time
    
    if trackEyes == 1:
        # annotate Pupil Core
        label = "condition_end"
        duration = 0.
        condition_trigger = new_trigger(label, duration)
        condition_trigger["trial"] = blockCount
        condition_trigger["condition"] = condition
        send_trigger(condition_trigger)
    
    # store data for conditions1 (TrialHandler)

    conditions1.addData('movie_2.timeStopped', movie_2.tStop)
    
    thisExp.nextEntry()
    
# completed 1 repeats of 'conditions1'

# set up handler to look after randomisation of conditions etc
conditions2 = data.TrialHandler(nReps=1, method='random', 
    extraInfo=expInfo, originPath=-1,
    trialList=data.importConditions('video_conditions.csv', selection='0:3'),
    seed=None, name='conditions2')
thisExp.addLoop(conditions2)  # add the loop to the experiment
thisConditions2 = conditions2.trialList[0]  # so we can initialise stimuli with some values
# abbreviate parameter names if possible (e.g. rgb = thisConditions2.rgb)
if thisConditions2 != None:
    for paramName in thisConditions2:
        exec('{} = thisConditions2[paramName]'.format(paramName))

for thisConditions2 in conditions2:
    currentLoop = conditions2
    # abbreviate parameter names if possible (e.g. rgb = thisConditions2.rgb)
    if thisConditions2 != None:
        for paramName in thisConditions2:
            exec('{} = thisConditions2[paramName]'.format(paramName))
    
    # ------Prepare to start Routine "begin"-------
    t = 0
    beginClock.reset()  # clock
    frameN = -1
    continueRoutine = True
    # update component parameters for each repeat
    key_resp_6 = keyboard.Keyboard()
    blockCount = blockCount + 1  # Set routine start values for blockCount
    # keep track of which components have finished
    if blockCount == 4: # Different text for the first trial
        text_8 = visual.TextStim(win=win, name='text_8',
            text="Press 'space' to begin the first session.\n\nIt may take a while to load, but please only press the button once.",
            font='Arial',
            pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);
        text_11 = visual.TextStim(win=win, name='text_11',
            text=" ",
            font='Arial',
            pos=(0, -0.1), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);
    else: 
        sessionNumber = blockCount - 3 # for labelling purposes to give participant an update on progress
        text_8 = visual.TextStim(win=win, name='text_8',
            text="Take a short break.",
            font='Arial',
            pos=(0, 0.2), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);
        text_11 = visual.TextStim(win=win, name='text_11',
            text="Press 'space' to begin session {} out of 6.\n\nIt may take a while to load, but please only press the button once.".format(sessionNumber),
            font='Arial',
            pos=(0, -0.1), height=0.05, wrapWidth=None, ori=0, 
            color='white', colorSpace='rgb', opacity=1, 
            languageStyle='LTR',
            depth=0.0);

    beginComponents = [text_8, text_11, key_resp_6]
    for thisComponent in beginComponents:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    
    # -------Start Routine "begin"-------
    while continueRoutine:
        # get current time
        t = beginClock.getTime()
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        if blockCount == 4:
            # *text_8* updates
            if t > 0 and text_8.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_8.tStart = t  # not accounting for scr refresh
                text_8.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_8, 'tStartRefresh')  # time at next scr refresh
                text_8.setAutoDraw(True)
            if t > 0 and text_11.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_11.tStart = t  # not accounting for scr refresh
                text_11.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_11, 'tStartRefresh')  # time at next scr refresh
                text_11.setAutoDraw(True)
        else:
            # *text_8* updates
            if t > 0 and text_8.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_8.tStart = t  # not accounting for scr refresh
                text_8.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_8, 'tStartRefresh')  # time at next scr refresh
                text_8.setAutoDraw(True)
            # *text_11* updates
            if t > 5 and text_11.status == NOT_STARTED:
                # keep track of start time/frame for later
                text_11.tStart = t  # not accounting for scr refresh
                text_11.frameNStart = frameN  # exact frame index
                win.timeOnFlip(text_11, 'tStartRefresh')  # time at next scr refresh
                text_11.setAutoDraw(True)
        
        # *key_resp_6* updates
        if key_resp_6.status == NOT_STARTED:
            # keep track of start time/frame for later
            key_resp_6.tStart = t  # not accounting for scr refresh
            key_resp_6.frameNStart = frameN  # exact frame index
            win.timeOnFlip(key_resp_6, 'tStartRefresh')  # time at next scr refresh
            key_resp_6.status = STARTED
            # keyboard checking is just starting
            win.callOnFlip(key_resp_6.clock.reset)  # t=0 on next screen flip
            key_resp_6.clearEvents(eventType='keyboard')
        if key_resp_6.status == STARTED:
            theseKeys = key_resp_6.getKeys(keyList=['space'], waitRelease=False)
            if len(theseKeys):
                theseKeys = theseKeys[0]  # at least one key was pressed
                
                # check for quit:
                if "escape" == theseKeys:
                    endExpNow = True
                key_resp_6.keys = theseKeys.name  # just the last key pressed
                key_resp_6.rt = theseKeys.rt
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
            core.quit()
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in beginComponents:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # -------Ending Routine "begin"-------
    for thisComponent in beginComponents:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    conditions0.addData('text_8.started', text_8.tStartRefresh)
    conditions0.addData('text_8.stopped', text_8.tStopRefresh)
    conditions0.addData('text_11.started', text_11.tStartRefresh)
    conditions0.addData('text_11.stopped', text_11.tStopRefresh)
    # check responses
    if key_resp_6.keys in ['', [], None]:  # No response was made
        key_resp_6.keys = None
    conditions0.addData('key_resp_6.keys',key_resp_6.keys)
    if key_resp_6.keys != None:  # we had a response
        conditions0.addData('key_resp_6.rt', key_resp_6.rt)
    conditions0.addData('key_resp_6.started', key_resp_6.tStartRefresh)
    conditions0.addData('key_resp_6.stopped', key_resp_6.tStopRefresh)
    thisExp.addData('blockCount.routineEndVal', blockCount)  # Save end routine value
    # the Routine "begin" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset()
    
    # ------Prepare to start Routine "tap"-------
    t = 0
    # tapClock.reset()  # clock moved down
    frameN = -1
    continueRoutine = True
    # update component parameters for each repeat
    movie_2 = visual.MovieStim3(
        win=win, name='movie_2',units='pix', 
        noAudio = False,
        filename=file_name,
        ori=0, pos=(0, 0), opacity=1,
        loop=False,
        size=[1920, 1080],
        depth=-1.0,
        )
   
    # keep track of which components have finished
    tapComponents = [text_9] # remove video and mic
    for thisComponent in tapComponents:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    
    # -------Start Routine "tap"-------
    
    movie_2.setAutoDraw(True) # begin movie playback
    movie_2.tStart = globalClock.getTime() # record movie start time
    
    tapClock.reset() # moved here to fix timing issues of letters
    
    if trackEyes == 1:
        # annotate Pupil Core
        label = "condition_start"
        duration = 0.
        condition_trigger = new_trigger(label, duration)
        condition_trigger["trial"] = blockCount
        condition_trigger["condition"] = condition
        send_trigger(condition_trigger)
    
    while continueRoutine:
        # get current time
        t = tapClock.getTime()
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_9* updates
        if t >= 2.5 and text_9.status == NOT_STARTED:
            # keep track of start time/frame for later
            text_9.tStart = t  # not accounting for scr refresh
            text_9.frameNStart = frameN  # exact frame index
            win.timeOnFlip(text_9, 'tStartRefresh')  # time at next scr refresh
            text_9.setAutoDraw(True)
        frameRemains = 2.5 + 5- win.monitorFramePeriod * 0.75  # most of one frame period left
        if text_9.status == STARTED and t >= frameRemains:
            # keep track of stop time/frame for later
            text_9.tStop = t  # not accounting for scr refresh
            text_9.frameNStop = frameN  # exact frame index
            win.timeOnFlip(text_9, 'tStopRefresh')  # time at next scr refresh
            text_9.setAutoDraw(False) 
        
        # removed movie and mic from loop
        
        # check for quit (typically the Esc key)
        if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
            core.quit()
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in tapComponents:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # -------Ending Routine "tap"-------
    for thisComponent in tapComponents:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    conditions2.addData('text_9.started', text_9.tStartRefresh)
    conditions2.addData('text_9.stopped', text_9.tStopRefresh)
    conditions2.addData('movie_2.started', movie_2.tStart)

    # the Routine "tap" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset()
    
    # set up handler to look after randomisation of conditions etc
    trials2 = data.TrialHandler(nReps=1, method='random', 
        extraInfo=expInfo, originPath=-1,
        trialList=data.importConditions('letter_conditions2.csv', selection='0:50'),
        seed=None, name='trials2')
    thisExp.addLoop(trials2)  # add the loop to the experiment
    thisTrials2 = trials2.trialList[0]  # so we can initialise stimuli with some values
    # abbreviate parameter names if possible (e.g. rgb = thisTrials2.rgb)
    if thisTrials2 != None:
        for paramName in thisTrials2:
            exec('{} = thisTrials2[paramName]'.format(paramName))
    
    for thisTrials2 in trials2:
        currentLoop = trials2
        # abbreviate parameter names if possible (e.g. rgb = thisTrials2.rgb)
        if thisTrials2 != None:
            for paramName in thisTrials2:
                exec('{} = thisTrials2[paramName]'.format(paramName))
        
        # ------Prepare to start Routine "trial"-------
        t = 0
        trialClock.reset()  # clock
        frameN = -1
        continueRoutine = True
        # update component parameters for each repeat
        key_resp = keyboard.Keyboard()
        stimulus_1.setPos((PositionX1, PositionY1))
        stimulus_1.setText(letter1)
        stimulus_2.setPos((PositionX2, PositionY2))
        stimulus_3.setPos((PositionX3, PositionY3))
        stimulus_4.setPos((PositionX4, PositionY4))
        stimulus_5.setPos((PositionX5, PositionY5))
        stimulus_6.setPos((PositionX6, PositionY6))
        stimulus_8.setPos((PositionX8, PositionY8))
        stumulus_7.setPos((PositionX7, PositionY7))
        stimulus_9.setPos((PositionX9, PositionY9))
        stimulus_10.setPos((PositionX10, PositionY10))
        # keep track of which components have finished
        trialComponents = [key_resp, stimulus_1, stimulus_2, stimulus_3, stimulus_4, stimulus_5, stimulus_6, stimulus_8, stumulus_7, stimulus_9, stimulus_10]
        for thisComponent in trialComponents:
            thisComponent.tStart = None
            thisComponent.tStop = None
            thisComponent.tStartRefresh = None
            thisComponent.tStopRefresh = None
            if hasattr(thisComponent, 'status'):
                thisComponent.status = NOT_STARTED
        
        # -------Start Routine "trial"-------
        while continueRoutine:
            # get current time
            t = trialClock.getTime()
            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
            # update/draw components on each frame
            
            # *key_resp* updates
            if t >= 0.5 and key_resp.status == NOT_STARTED:
                # keep track of start time/frame for later
                key_resp.tStart = t  # not accounting for scr refresh
                key_resp.frameNStart = frameN  # exact frame index
                win.timeOnFlip(key_resp, 'tStartRefresh')  # time at next scr refresh
                key_resp.status = STARTED
                # keyboard checking is just starting
                win.callOnFlip(key_resp.clock.reset)  # t=0 on next screen flip
                key_resp.clearEvents(eventType='keyboard')
            if key_resp.status == STARTED:
                theseKeys = key_resp.getKeys(keyList=['n', 'm'], waitRelease=False)
                if len(theseKeys):
                    theseKeys = theseKeys[0]  # at least one key was pressed
                    
                    # check for quit:
                    if "escape" == theseKeys:
                        endExpNow = True
                    key_resp.keys = theseKeys.name  # just the last key pressed
                    key_resp.rt = theseKeys.rt
                    # was this 'correct'?
                    if (key_resp.keys == str(corrAns)) or (key_resp.keys == corrAns):
                        key_resp.corr = 1
                    else:
                        key_resp.corr = 0
                    # a response ends the routine
                    continueRoutine = False
            
            # *stimulus_1* updates
            if t >= 0.5 and stimulus_1.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_1.tStart = t  # not accounting for scr refresh
                stimulus_1.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_1, 'tStartRefresh')  # time at next scr refresh
                stimulus_1.setAutoDraw(True)
            
            # *stimulus_2* updates
            if t >= 0.5 and stimulus_2.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_2.tStart = t  # not accounting for scr refresh
                stimulus_2.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_2, 'tStartRefresh')  # time at next scr refresh
                stimulus_2.setAutoDraw(True)
            
            # *stimulus_3* updates
            if t >= 0.5 and stimulus_3.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_3.tStart = t  # not accounting for scr refresh
                stimulus_3.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_3, 'tStartRefresh')  # time at next scr refresh
                stimulus_3.setAutoDraw(True)
            
            # *stimulus_4* updates
            if t >= 0.5 and stimulus_4.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_4.tStart = t  # not accounting for scr refresh
                stimulus_4.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_4, 'tStartRefresh')  # time at next scr refresh
                stimulus_4.setAutoDraw(True)
            
            # *stimulus_5* updates
            if t >= 0.5 and stimulus_5.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_5.tStart = t  # not accounting for scr refresh
                stimulus_5.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_5, 'tStartRefresh')  # time at next scr refresh
                stimulus_5.setAutoDraw(True)
            
            # *stimulus_6* updates
            if t >= 0.5 and stimulus_6.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_6.tStart = t  # not accounting for scr refresh
                stimulus_6.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_6, 'tStartRefresh')  # time at next scr refresh
                stimulus_6.setAutoDraw(True)
            
            # *stimulus_8* updates
            if t >= 0.5 and stimulus_8.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_8.tStart = t  # not accounting for scr refresh
                stimulus_8.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_8, 'tStartRefresh')  # time at next scr refresh
                stimulus_8.setAutoDraw(True)
            
            # *stumulus_7* updates
            if t >= 0.5 and stumulus_7.status == NOT_STARTED:
                # keep track of start time/frame for later
                stumulus_7.tStart = t  # not accounting for scr refresh
                stumulus_7.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stumulus_7, 'tStartRefresh')  # time at next scr refresh
                stumulus_7.setAutoDraw(True)
            
            # *stimulus_9* updates
            if t >= 0.5 and stimulus_9.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_9.tStart = t  # not accounting for scr refresh
                stimulus_9.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_9, 'tStartRefresh')  # time at next scr refresh
                stimulus_9.setAutoDraw(True)
            
            # *stimulus_10* updates
            if t >= 0.5 and stimulus_10.status == NOT_STARTED:
                # keep track of start time/frame for later
                stimulus_10.tStart = t  # not accounting for scr refresh
                stimulus_10.frameNStart = frameN  # exact frame index
                win.timeOnFlip(stimulus_10, 'tStartRefresh')  # time at next scr refresh
                stimulus_10.setAutoDraw(True)
            
            # check for quit (typically the Esc key)
            if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
                core.quit()
            
            # check if all components have finished
            if not continueRoutine:  # a component has requested a forced-end of Routine
                break
            continueRoutine = False  # will revert to True if at least one component still running
            for thisComponent in trialComponents:
                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                    continueRoutine = True
                    break  # at least one component has not yet finished
            
            # refresh the screen
            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
                win.flip()
        
        # -------Ending Routine "trial"-------
        for thisComponent in trialComponents:
            if hasattr(thisComponent, "setAutoDraw"):
                thisComponent.setAutoDraw(False)
        # check responses
        if key_resp.keys in ['', [], None]:  # No response was made
            key_resp.keys = None
            # was no response the correct answer?!
            if str(corrAns).lower() == 'none':
               key_resp.corr = 1;  # correct non-response
            else:
               key_resp.corr = 0;  # failed to respond (incorrectly)
        # store data for trials2 (TrialHandler)
        trials2.addData('key_resp.keys',key_resp.keys)
        trials2.addData('key_resp.corr', key_resp.corr)
        if key_resp.keys != None:  # we had a response
            trials2.addData('key_resp.rt', key_resp.rt)
        trials2.addData('key_resp.started', key_resp.tStartRefresh)
        trials2.addData('key_resp.stopped', key_resp.tStopRefresh)
        trials2.addData('stimulus_1.started', stimulus_1.tStartRefresh)
        trials2.addData('stimulus_1.stopped', stimulus_1.tStopRefresh)
        trials2.addData('stimulus_2.started', stimulus_2.tStartRefresh)
        trials2.addData('stimulus_2.stopped', stimulus_2.tStopRefresh)
        trials2.addData('stimulus_3.started', stimulus_3.tStartRefresh)
        trials2.addData('stimulus_3.stopped', stimulus_3.tStopRefresh)
        trials2.addData('stimulus_4.started', stimulus_4.tStartRefresh)
        trials2.addData('stimulus_4.stopped', stimulus_4.tStopRefresh)
        trials2.addData('stimulus_5.started', stimulus_5.tStartRefresh)
        trials2.addData('stimulus_5.stopped', stimulus_5.tStopRefresh)
        trials2.addData('stimulus_6.started', stimulus_6.tStartRefresh)
        trials2.addData('stimulus_6.stopped', stimulus_6.tStopRefresh)
        trials2.addData('stimulus_8.started', stimulus_8.tStartRefresh)
        trials2.addData('stimulus_8.stopped', stimulus_8.tStopRefresh)
        trials2.addData('stumulus_7.started', stumulus_7.tStartRefresh)
        trials2.addData('stumulus_7.stopped', stumulus_7.tStopRefresh)
        trials2.addData('stimulus_9.started', stimulus_9.tStartRefresh)
        trials2.addData('stimulus_9.stopped', stimulus_9.tStopRefresh)
        trials2.addData('stimulus_10.started', stimulus_10.tStartRefresh)
        trials2.addData('stimulus_10.stopped', stimulus_10.tStopRefresh)
        # the Routine "trial" was not non-slip safe, so reset the non-slip timer
        routineTimer.reset()
        thisExp.nextEntry()
        
    # completed 1 repeats of 'trials2'
    
    movie_2.stop()
    movie_2.tStop = globalClock.getTime()
    
    if trackEyes == 1:
        # annotate Pupil Core
        label = "condition_end"
        duration = 0.
        condition_trigger = new_trigger(label, duration)
        condition_trigger["trial"] = blockCount
        condition_trigger["condition"] = condition
        send_trigger(condition_trigger)
    
        # mic stop & responses

    # store data for conditions1 (TrialHandler)

    conditions1.addData('movie_2.timeStopped', movie_2.tStop)
    
    thisExp.nextEntry()
    
# completed 1 repeats of 'conditions2'


# ------Prepare to start Routine "end"-------
t = 0
endClock.reset()  # clock
frameN = -1
continueRoutine = True
# update component parameters for each repeat
key_resp_7 = keyboard.Keyboard()
# keep track of which components have finished
endComponents = [text_4, key_resp_7]
for thisComponent in endComponents:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# -------Start Routine "end"-------
while continueRoutine:
    # get current time
    t = endClock.getTime()
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *text_4* updates
    if t >= 0.0 and text_4.status == NOT_STARTED:
        # keep track of start time/frame for later
        text_4.tStart = t  # not accounting for scr refresh
        text_4.frameNStart = frameN  # exact frame index
        win.timeOnFlip(text_4, 'tStartRefresh')  # time at next scr refresh
        text_4.setAutoDraw(True)
    
    # *key_resp_7* updates
    if t >= 0.0 and key_resp_7.status == NOT_STARTED:
        # keep track of start time/frame for later
        key_resp_7.tStart = t  # not accounting for scr refresh
        key_resp_7.frameNStart = frameN  # exact frame index
        win.timeOnFlip(key_resp_7, 'tStartRefresh')  # time at next scr refresh
        key_resp_7.status = STARTED
        # keyboard checking is just starting
        win.callOnFlip(key_resp_7.clock.reset)  # t=0 on next screen flip
        key_resp_7.clearEvents(eventType='keyboard')
    if key_resp_7.status == STARTED:
        theseKeys = key_resp_7.getKeys(keyList=None, waitRelease=False)
        if len(theseKeys):
            theseKeys = theseKeys[0]  # at least one key was pressed
            
            # check for quit:
            if "escape" == theseKeys:
                endExpNow = True
            key_resp_7.keys = theseKeys.name  # just the last key pressed
            key_resp_7.rt = theseKeys.rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in endComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "end"-------
for thisComponent in endComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('text_4.started', text_4.tStartRefresh)
thisExp.addData('text_4.stopped', text_4.tStopRefresh)
# check responses
if key_resp_7.keys in ['', [], None]:  # No response was made
    key_resp_7.keys = None
thisExp.addData('key_resp_7.keys',key_resp_7.keys)
if key_resp_7.keys != None:  # we had a response
    thisExp.addData('key_resp_7.rt', key_resp_7.rt)
thisExp.addData('key_resp_7.started', key_resp_7.tStartRefresh)
thisExp.addData('key_resp_7.stopped', key_resp_7.tStopRefresh)
thisExp.nextEntry()
# the Routine "end" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# Flip one final time so any remaining win.callOnFlip() 
# and win.timeOnFlip() tasks get executed before quitting
win.flip()

if trackEyes == 1:
    # stop recording
    pupil_remote.send_string("r")
    pupil_remote.recv_string()

# these shouldn't be strictly necessary (should auto-save)
thisExp.saveAsWideText(filename+'.csv')
thisExp.saveAsPickle(filename)
logging.flush()
# make sure everything is closed down
thisExp.abort()  # or data files will save again on exit
win.close()
core.quit()
